// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  role            Role @default(USER)

  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmations TwoFactorConfirmation[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum TokenType {
  VERIFICATION
  FORGOTPASSWORD
  TWOFACTORAUTH
}

model OneTimeToken {
  id                 String  @id @default(cuid())
  email              String 
  token              String @default(uuid()) @unique
  expiresAt          DateTime @default(now())

  type               TokenType
  payload            String?

  @@unique([type, email]) 
}

model TwoFactorConfirmation {
  id                 String  @id @default(cuid())

  key                String @default(uuid())
  userId             String 
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt          DateTime? // NULL means it never expires
}
